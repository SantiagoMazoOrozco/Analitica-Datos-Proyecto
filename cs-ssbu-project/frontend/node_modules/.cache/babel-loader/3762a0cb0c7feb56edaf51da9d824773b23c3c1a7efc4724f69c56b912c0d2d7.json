{"ast":null,"code":"import axios from 'axios';\nconst startggURL = \"https://api.start.gg/gql/alpha\";\nconst starggKey = process.env.REACT_APP_STARTGG_API_KEY;\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const getEventDetails = async eventId => {\n  try {\n    const response = await axios.post(startggURL, {\n      query: `\n        query EventDetails($eventId: ID!) { \n          event(id: $eventId) {\n            name\n            startAt\n          }\n        }\n      `,\n      variables: {\n        eventId: eventId\n      }\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${starggKey}`\n      }\n    });\n    const data = response.data;\n    console.log('Respuesta de la API para EventDetails:', data);\n    if (data.errors) {\n      console.error('Errores en la respuesta de la API para EventDetails:', data.errors);\n      console.error('Detalles del error:', data.errors[0]);\n      throw new Error('Error en la respuesta de la API para EventDetails');\n    }\n    if (data.data && data.data.event) {\n      return {\n        name: data.data.event.name,\n        date: new Date(data.data.event.startAt * 1000).toLocaleDateString(),\n        location: 'Ubicación no disponible' // Ajuste para manejar la ausencia de venueAddress\n      };\n    } else {\n      console.error('Datos de respuesta no esperados para EventDetails:', data);\n      throw new Error('Datos de respuesta no esperados para EventDetails');\n    }\n  } catch (err) {\n    console.error('Error al obtener detalles del evento:', err);\n    throw err;\n  }\n};\nexport const getEventResults = async eventId => {\n  let numEntrants = 0;\n  let numEntrantsFound = 0;\n  let pageNumber = 1;\n  let results = [];\n\n  // Primera solicitud para obtener el número total de participantes\n  try {\n    const response = await axios.post(startggURL, {\n      query: `\n        query EventSets($eventId: ID!) { \n          event(id: $eventId) {\n            sets(sortType: STANDARD) {\n              pageInfo { total }\n            }\n          }\n        }\n      `,\n      variables: {\n        eventId: eventId\n      }\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${starggKey}`\n      }\n    });\n    const data = response.data;\n    console.log('Respuesta de la API para EventSets:', data);\n    if (data.errors) {\n      console.error('Errores en la respuesta de la API para EventSets:', data.errors);\n      console.error('Detalles del error:', data.errors[0]);\n      throw new Error('Error en la respuesta de la API para EventSets');\n    }\n    if (data.data && data.data.event && data.data.event.sets && data.data.event.sets.pageInfo) {\n      numEntrants = data.data.event.sets.pageInfo.total;\n    } else {\n      console.error('Datos de respuesta no esperados para EventSets:', data);\n      throw new Error('Datos de respuesta no esperados para EventSets');\n    }\n  } catch (err) {\n    console.error('Error al obtener sets del evento:', err);\n    throw err;\n  }\n  await delay(1000);\n\n  // Bucle para obtener los resultados del evento\n  while (numEntrantsFound < numEntrants) {\n    try {\n      const response = await axios.post(startggURL, {\n        query: `\n          query EventStandings($eventId: ID!, $page: Int!, $perPage: Int!) { \n            event(id: $eventId) {\n              standings(query: { perPage: $perPage, page: $page }) {\n                nodes {\n                  placement\n                  entrant { name }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          eventId: eventId,\n          page: pageNumber,\n          perPage: 50\n        }\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${starggKey}`\n        }\n      });\n      const data = response.data;\n      console.log('Respuesta de la API para EventStandings:', data);\n      if (data.errors) {\n        console.error('Errores en la respuesta de la API para EventStandings:', data.errors);\n        console.error('Detalles del error:', data.errors[0]);\n        throw new Error('Error en la respuesta de la API para EventStandings');\n      }\n      if (data.data && data.data.event && data.data.event.standings && data.data.event.standings.nodes) {\n        let nodes = data.data.event.standings.nodes;\n        if (nodes.length === 0) {\n          console.log('No se encontraron más resultados.');\n          break; // Salir del bucle si no hay más resultados\n        }\n        nodes.forEach(node => {\n          results.push({\n            player: node.entrant.name,\n            score: node.placement\n          });\n        });\n        numEntrantsFound += nodes.length;\n      } else {\n        console.error('Datos de respuesta no esperados para EventStandings:', data);\n        throw new Error('Datos de respuesta no esperados para EventStandings');\n      }\n    } catch (err) {\n      console.error('Error al obtener las posiciones del evento:', err);\n      break; // Salir del bucle en caso de error\n    }\n    pageNumber += 1;\n    await delay(1000);\n  }\n  return results;\n};","map":{"version":3,"names":["axios","startggURL","starggKey","process","env","REACT_APP_STARTGG_API_KEY","delay","ms","Promise","resolve","setTimeout","getEventDetails","eventId","response","post","query","variables","headers","data","console","log","errors","error","Error","event","name","date","Date","startAt","toLocaleDateString","location","err","getEventResults","numEntrants","numEntrantsFound","pageNumber","results","sets","pageInfo","total","page","perPage","standings","nodes","length","forEach","node","push","player","entrant","score","placement"],"sources":["C:/Users/linkm/OneDrive/Documentos/Proyectos/Analisis de Datos/Analitica-Datos-Proyecto/cs-ssbu-project/frontend/src/api/api_result.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst startggURL = \"https://api.start.gg/gql/alpha\";\r\nconst starggKey = process.env.REACT_APP_STARTGG_API_KEY;\r\n\r\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport const getEventDetails = async (eventId) => {\r\n  try {\r\n    const response = await axios.post(startggURL, {\r\n      query: `\r\n        query EventDetails($eventId: ID!) { \r\n          event(id: $eventId) {\r\n            name\r\n            startAt\r\n          }\r\n        }\r\n      `,\r\n      variables: {\r\n        eventId: eventId\r\n      }\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${starggKey}`\r\n      }\r\n    });\r\n\r\n    const data = response.data;\r\n    console.log('Respuesta de la API para EventDetails:', data);\r\n\r\n    if (data.errors) {\r\n      console.error('Errores en la respuesta de la API para EventDetails:', data.errors);\r\n      console.error('Detalles del error:', data.errors[0]);\r\n      throw new Error('Error en la respuesta de la API para EventDetails');\r\n    }\r\n\r\n    if (data.data && data.data.event) {\r\n      return {\r\n        name: data.data.event.name,\r\n        date: new Date(data.data.event.startAt * 1000).toLocaleDateString(),\r\n        location: 'Ubicación no disponible' // Ajuste para manejar la ausencia de venueAddress\r\n      };\r\n    } else {\r\n      console.error('Datos de respuesta no esperados para EventDetails:', data);\r\n      throw new Error('Datos de respuesta no esperados para EventDetails');\r\n    }\r\n  } catch (err) {\r\n    console.error('Error al obtener detalles del evento:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getEventResults = async (eventId) => {\r\n  let numEntrants = 0;\r\n  let numEntrantsFound = 0;\r\n  let pageNumber = 1;\r\n  let results = [];\r\n\r\n  // Primera solicitud para obtener el número total de participantes\r\n  try {\r\n    const response = await axios.post(startggURL, {\r\n      query: `\r\n        query EventSets($eventId: ID!) { \r\n          event(id: $eventId) {\r\n            sets(sortType: STANDARD) {\r\n              pageInfo { total }\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      variables: {\r\n        eventId: eventId\r\n      }\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${starggKey}`\r\n      }\r\n    });\r\n\r\n    const data = response.data;\r\n    console.log('Respuesta de la API para EventSets:', data);\r\n\r\n    if (data.errors) {\r\n      console.error('Errores en la respuesta de la API para EventSets:', data.errors);\r\n      console.error('Detalles del error:', data.errors[0]);\r\n      throw new Error('Error en la respuesta de la API para EventSets');\r\n    }\r\n\r\n    if (data.data && data.data.event && data.data.event.sets && data.data.event.sets.pageInfo) {\r\n      numEntrants = data.data.event.sets.pageInfo.total;\r\n    } else {\r\n      console.error('Datos de respuesta no esperados para EventSets:', data);\r\n      throw new Error('Datos de respuesta no esperados para EventSets');\r\n    }\r\n  } catch (err) {\r\n    console.error('Error al obtener sets del evento:', err);\r\n    throw err;\r\n  }\r\n\r\n  await delay(1000);\r\n\r\n  // Bucle para obtener los resultados del evento\r\n  while (numEntrantsFound < numEntrants) {\r\n    try {\r\n      const response = await axios.post(startggURL, {\r\n        query: `\r\n          query EventStandings($eventId: ID!, $page: Int!, $perPage: Int!) { \r\n            event(id: $eventId) {\r\n              standings(query: { perPage: $perPage, page: $page }) {\r\n                nodes {\r\n                  placement\r\n                  entrant { name }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        `,\r\n        variables: {\r\n          eventId: eventId,\r\n          page: pageNumber,\r\n          perPage: 50\r\n        }\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${starggKey}`\r\n        }\r\n      });\r\n\r\n      const data = response.data;\r\n      console.log('Respuesta de la API para EventStandings:', data);\r\n\r\n      if (data.errors) {\r\n        console.error('Errores en la respuesta de la API para EventStandings:', data.errors);\r\n        console.error('Detalles del error:', data.errors[0]);\r\n        throw new Error('Error en la respuesta de la API para EventStandings');\r\n      }\r\n\r\n      if (data.data && data.data.event && data.data.event.standings && data.data.event.standings.nodes) {\r\n        let nodes = data.data.event.standings.nodes;\r\n        if (nodes.length === 0) {\r\n          console.log('No se encontraron más resultados.');\r\n          break; // Salir del bucle si no hay más resultados\r\n        }\r\n        nodes.forEach(node => {\r\n          results.push({ player: node.entrant.name, score: node.placement });\r\n        });\r\n        numEntrantsFound += nodes.length;\r\n      } else {\r\n        console.error('Datos de respuesta no esperados para EventStandings:', data);\r\n        throw new Error('Datos de respuesta no esperados para EventStandings');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error al obtener las posiciones del evento:', err);\r\n      break; // Salir del bucle en caso de error\r\n    }\r\n\r\n    pageNumber += 1;\r\n    await delay(1000);\r\n  }\r\n\r\n  return results;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}